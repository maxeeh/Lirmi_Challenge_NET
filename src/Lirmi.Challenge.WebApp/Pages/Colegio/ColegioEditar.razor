@page "/Colegios/Editar"
@page "/Colegios/Editar/{id:int}"
@using Lirmi.Domain.Models
@inject IColegioService _colegioService;
@inject NavigationManager _navigationManager;


@if(Id == null){
<MudText Typo="Typo.h5" GutterBottom="true">Crear Colegio</MudText>
}
else{
<MudText Typo="Typo.h5" GutterBottom="true">Editar Colegio</MudText>
}

<EditForm Model="@colegio" OnSubmit="HandleSubmit">
	<DataAnnotationsValidator/>
	<MudGrid>
		<MudItem xs="12" sm="7">
			<MudCard>
				<MudCardContent>
					<MudTextField Label="Nombre" Class="mt-3"
					              @bind-Value="colegio.Nombre" For="@(() => colegio.Nombre)"/>
				</MudCardContent>
				<MudCardActions>
					<MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Registrar </MudButton>
				</MudCardActions>
			</MudCard>
		</MudItem>
	</MudGrid>
</EditForm>

@code {
	[Parameter]
	public int? Id { get; set; }
	ColegioModel colegio = new ColegioModel { CursosModels = new List<CursoModel>() };

	protected override async Task OnParametersSetAsync()
	{
		if (Id != null)
		{
			colegio = await _colegioService.ObtenerColegioPorId((int)Id);
		}
		
	}

	async Task HandleSubmit()
	{
		if (Id == null)
		{
			colegio.CursosModels = new List<CursoModel>();
			colegio.Activo = true;
			await _colegioService.CrearColegio(colegio);

			_navigationManager.NavigateTo("Colegios/Home");
		}
		else
		{
			colegio.CursosModels = new List<CursoModel>();
			await _colegioService.ActualizarColegio(colegio);


			_navigationManager.NavigateTo("Colegios/Home");
		}
	}

}
